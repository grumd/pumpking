{"version":3,"file":"Chart-24be986f.js","sources":["../../src/legacy-code/components/Leaderboard/Result.jsx","../../src/legacy-code/components/Leaderboard/ResultsCollapser.jsx","../../src/legacy-code/components/Contexts/FilteredDataContext.jsx","../../src/legacy-code/components/Leaderboard/Chart.jsx"],"sourcesContent":["import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport classNames from 'classnames';\nimport numeral from 'numeral';\nimport { FaExclamationTriangle, FaAngleDoubleUp } from 'react-icons/fa';\nimport Tooltip from 'react-responsive-ui/modules/Tooltip';\n\nimport { routes } from 'legacy-code/constants/routes';\nimport { DEBUG } from 'legacy-code/constants/env';\n\nimport Flag from 'legacy-code/components/Shared/Flag';\nimport Grade from 'legacy-code/components/Shared/Grade';\nimport Overlay from 'legacy-code/components/Shared/Overlay/Overlay';\n\nimport { getTimeAgo as getShortTimeAgo } from 'legacy-code/components/SocketTracker/helpers';\n\nimport { tooltipFormatter } from 'legacy-code/utils/leaderboards';\nimport { getExp } from 'legacy-code/utils/exp';\nimport { colorsArray } from 'legacy-code/utils/colors';\nimport { useLanguage } from 'utils/context/translation';\nimport { ResultScreenshotLink } from 'components/ResultScreenshotLink/ResultScreenshotLink';\n\nconst Result = ({\n  // shared\n  res,\n  chart,\n  placeDifference,\n  // leaderboard\n  showPpChange,\n  highlightIndex,\n  // socket\n  leftProfile = {},\n  rightProfile = {},\n  isSocketView = false,\n  bestGradeScore = false,\n  notBestGradeResult = false,\n}) => {\n  const lang = useLanguage();\n  const region = useSelector((state) => state.results.profiles[res.playerId]?.region);\n  const isCurrentPlayer = useSelector((state) => res.playerId === state.user.data?.player?.id);\n\n  // Rating info for nickname column:\n  let ratingInfoBlock = null;\n  if (DEBUG) {\n    // In debug mode we show all info\n    ratingInfoBlock = (\n      <>\n        <span className=\"debug-elo-info\"> {res.pp && `${res.pp}pp`}</span>\n      </>\n    );\n  } else if (showPpChange && res.pp) {\n    // In non-debug mode we show relevant info for selected protagonist\n    ratingInfoBlock = (\n      <>\n        {' / '}\n        <span>{res.pp}pp</span>\n      </>\n    );\n  }\n\n  const flag = region ? <Flag region={region} /> : null;\n\n  const exp = getExp(res, chart);\n  const playerRoute = routes.profile.getPath({ id: res.playerId });\n\n  return (\n    <tr\n      key={res.id}\n      className={classNames({\n        empty: !res.accuracy,\n        latest:\n          new Date(chart.latestAddedScoreDate) - new Date(res.dateAdded) < 12 * 60 * 60 * 1000,\n        left: res.nickname === leftProfile.name,\n        right: res.nickname === rightProfile.name,\n      })}\n      style={\n        highlightIndex > -1\n          ? {\n              background: colorsArray[highlightIndex] + '3A',\n              outline: `1px solid ${colorsArray[highlightIndex]}A0`,\n            }\n          : {}\n      }\n    >\n      {!isSocketView && (\n        <td className=\"place\" style={isCurrentPlayer ? { fontWeight: 'bold', color: '#ddd' } : {}}>\n          {res.isSecondOccurenceInResults ? '' : res.topPlace && `#${res.topPlace}`}\n        </td>\n      )}\n      <td\n        className={classNames('nickname', bestGradeScore && 'opacity')}\n        style={highlightIndex > -1 || isCurrentPlayer ? { fontWeight: 'bold' } : {}}\n      >\n        <div className=\"nickname-container\">\n          {flag}\n          <span className=\"nickname-text\">\n            <Link exact to={playerRoute}>\n              {res.nickname}\n            </Link>\n            {!!placeDifference && (\n              <span className=\"change-holder up\">\n                <span>{placeDifference}</span>\n                <FaAngleDoubleUp />\n              </span>\n            )}\n            {ratingInfoBlock}\n          </span>\n          {!isSocketView && (\n            <div className=\"mods-container\">\n              {isSocketView &&\n                res.mods &&\n                res.mods\n                  .split(' ')\n                  .filter((mod) => mod.includes('AV'))\n                  .map((avMod) => (\n                    <div className=\"mod av-mod\">\n                      <div className=\"av-text\">AV</div>\n                      <div className=\"av-number\">{avMod.replace('AV', '')}</div>\n                    </div>\n                  ))}\n              {isSocketView &&\n                res.mods &&\n                res.mods\n                  .split(' ')\n                  .filter((mod) => mod.endsWith('X'))\n                  .map((xMod) => (\n                    <div className=\"mod x-mod\">\n                      <div className=\"x-number\">{xMod}</div>\n                    </div>\n                  ))}\n              {res.isRank && <div className=\"mod vj\">{res.mods ? 'R' : 'R?'}</div>}\n              {res.isHJ && <div className=\"mod hj\">HJ</div>}\n            </div>\n          )}\n        </div>\n      </td>\n      <td className={classNames('score', bestGradeScore && 'opacity')}>\n        <Overlay\n          overlayClassName=\"score-overlay-outer\"\n          overlayItem={\n            <span className=\"score-span\">\n              {res.scoreIncrease > res.score * 0.8 && '*'}\n              {numeral(res.score).format('0,0')}\n            </span>\n          }\n          placement=\"top\"\n        >\n          <div className=\"score-overlay\">\n            <div>\n              <ResultScreenshotLink resultId={res.id} />\n            </div>\n            {DEBUG && (\n              <>\n                <div>\n                  <span className=\"_grey\">result id: </span>\n                  {res.id}\n                </div>\n                <div>\n                  <span className=\"_grey\">player id: </span>\n                  {res.playerId}\n                </div>\n              </>\n            )}\n            <div>\n              <span className=\"_grey\">{lang.PLAYER}: </span>\n              <Link exact to={playerRoute}>\n                {res.nickname} ({res.nicknameArcade})\n              </Link>\n            </div>\n            {exp ? (\n              <div className=\"important\">\n                <span className=\"_grey\">{lang.EXP}: </span>+{numeral(exp).format('0,0')}\n              </div>\n            ) : null}\n            {res.pp ? (\n              <div className=\"important\">\n                <span className=\"_grey\">{lang.PP}: </span>\n                <span>{res.pp}pp</span>\n              </div>\n            ) : null}\n            {!res.isExactDate && (\n              <div className=\"warning\">\n                <FaExclamationTriangle />\n                {lang.MY_BEST_SCORE_WARNING}\n              </div>\n            )}\n            {res.isExactDate && (\n              <>\n                {res.mods && (\n                  <div>\n                    <span className=\"_grey\">{lang.MODS}: </span>\n                    {res.mods}\n                  </div>\n                )}\n                {res.combo != null && (\n                  <div className=\"mobile-only\">\n                    <span className=\"_grey\">{lang.COMBO}: </span>\n                    {res.combo}\n                  </div>\n                )}\n                {res.calories != null && (\n                  <div>\n                    <span className=\"_grey\">{lang.CCAL}: </span>\n                    {res.calories}\n                  </div>\n                )}\n                {res.scoreIncrease != null && (\n                  <div>\n                    <span className=\"_grey\">{lang.SCORE_INCREASE}: </span>+\n                    {numeral(res.scoreIncrease).format('0,0')}\n                  </div>\n                )}\n                {res.originalChartMix && (\n                  <div>\n                    <div className=\"warning\">\n                      <FaExclamationTriangle />\n                      {lang.ORIGINAL_MIX} {res.originalChartMix}\n                    </div>\n                    {res.originalChartLabel && (\n                      <div>\n                        <span className=\"_grey\">{lang.ORIGINAL_CHART} </span>\n                        {res.originalChartLabel}\n                      </div>\n                    )}\n                    {res.originalScore && (\n                      <div>\n                        <span className=\"_grey\">{lang.ORIGINAL_SCORE} </span>\n                        {res.originalScore}\n                      </div>\n                    )}\n                  </div>\n                )}\n                {res.scoreIncrease > res.score * 0.8 && lang.SIGHTREAD}\n              </>\n            )}\n          </div>\n        </Overlay>\n      </td>\n      <td className={classNames('grade', notBestGradeResult && 'opacity')}>\n        <div className=\"img-holder\">\n          <Grade grade={res.grade} />\n        </div>\n      </td>\n      {isSocketView && (\n        <td\n          className={classNames('mods', {\n            vj: res.isRank,\n            hj: res.isHJ,\n          })}\n        >\n          <div className=\"mods-container\">\n            {isSocketView &&\n              res.mods &&\n              res.mods\n                .filter((mod) => mod.includes('AV'))\n                .map((avMod) => (\n                  <div className=\"av-mod\">\n                    <div className=\"av-text\">AV</div>\n                    <div className=\"av-number\">{avMod.replace('AV', '')}</div>\n                  </div>\n                ))}\n            {isSocketView &&\n              res.mods &&\n              res.mods\n                .split(' ')\n                .filter((mod) => mod.endsWith('X'))\n                .map((xMod) => (\n                  <div className=\"x-mod\">\n                    <div className=\"x-number\">{xMod}</div>\n                  </div>\n                ))}\n            {res.isRank && <div className=\"inner\">{res.isExactDate ? 'R' : 'R?'}</div>}\n            {res.isHJ && <div className=\"inner\">HJ</div>}\n          </div>\n        </td>\n      )}\n      <td className={classNames('number', 'miss', bestGradeScore && 'opacity')}>{res.miss}</td>\n      <td className={classNames('number', 'bad', bestGradeScore && 'opacity')}>{res.bad}</td>\n      <td className={classNames('number', 'good', bestGradeScore && 'opacity')}>{res.good}</td>\n      <td className={classNames('number', 'great', bestGradeScore && 'opacity')}>{res.great}</td>\n      <td className={classNames('number', 'perfect', bestGradeScore && 'opacity')}>\n        {res.perfect}\n      </td>\n      <td className={classNames('combo', 'desktop-only', bestGradeScore && 'opacity')}>\n        {res.combo && `${res.combo}x`}\n      </td>\n      <td className={classNames('accuracy', bestGradeScore && 'opacity')}>\n        {res.accuracy ? (\n          <Tooltip\n            content={`Phoenix score: ${Math.floor(res.accuracyRaw * 10000)}`}\n            tooltipClassName=\"pumpking-tooltip\"\n          >\n            {res.accuracy === 100 ? 100 : res.accuracy.toFixed(2)}%\n          </Tooltip>\n        ) : null}\n      </td>\n      <td\n        className={classNames('date', {\n          latest: res.isLatestScore,\n          opacity: bestGradeScore,\n        })}\n      >\n        {isSocketView ? (\n          getShortTimeAgo(lang, res.dateObject)\n        ) : (\n          <Tooltip content={tooltipFormatter(lang, res)} tooltipClassName=\"pumpking-tooltip\">\n            {getShortTimeAgo(lang, res.dateObject)}\n            {res.isExactDate ? '' : '?'}\n          </Tooltip>\n        )}\n      </td>\n    </tr>\n  );\n};\n\nexport default Result;\n","import React, { useState } from 'react';\nimport { BsArrowsExpand } from 'react-icons/bs';\n\nimport './results-collapser.scss';\nimport { useLanguage } from 'utils/context/translation';\n\nexport const ResultsCollapser = ({ children, count }) => {\n  const [collapsed, setCollapsed] = useState(true);\n  const lang = useLanguage();\n\n  if (collapsed && count > 1) {\n    return (\n      <tr className=\"results-collapser\" onClick={() => setCollapsed(false)}>\n        <td colSpan=\"20\">\n          <div>\n            <button>\n              {count && lang.SHOW_MORE_RESULTS ? (\n                <>{lang.SHOW_MORE_RESULTS(count)}</>\n              ) : (\n                <BsArrowsExpand />\n              )}\n            </button>\n          </div>\n        </td>\n      </tr>\n    );\n  }\n\n  return <>{children}</>;\n};\n","import React from 'react';\n\nexport const FilteredDataContext = React.createContext([]);\n","import React, { useState, useEffect, useContext } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport _ from 'lodash/fp';\nimport { FaYoutube, FaGlobeAmericas } from 'react-icons/fa';\nimport classNames from 'classnames';\nimport queryString from 'query-string';\n\nimport { routes } from 'legacy-code/constants/routes';\n\nimport Result from './Result';\nimport { ChartLabel } from './ChartLabel';\nimport { ResultsCollapser } from './ResultsCollapser';\n\nimport { useLanguage } from 'utils/context/translation';\nimport { FilteredDataContext } from '../Contexts/FilteredDataContext';\n\nconst Chart = React.forwardRef(\n  (\n    {\n      playersHiddenStatus: propPlayersHiddenStatus,\n      showHiddenPlayers = false,\n      showProtagonistPpChange = false,\n      uniqueSelectedNames = [],\n      protagonistName = null,\n      // socket stuff\n      leftProfile = {},\n      rightProfile = {},\n      isSocketView = false,\n      chartIndex,\n      chart: forcedChart,\n    },\n    ref\n  ) => {\n    const currentPlayerId = useSelector((state) => state.user.data?.player?.id);\n    const statePlayersHiddenStatus = useSelector(\n      (state) => state.preferences.data.playersHiddenStatus\n    );\n    const playersHiddenStatus = propPlayersHiddenStatus || statePlayersHiddenStatus || {};\n\n    const filteredData = useContext(FilteredDataContext);\n    const chart = forcedChart || filteredData[chartIndex];\n    const [isHidingPlayers, setHidingPlayers] = useState(!showHiddenPlayers);\n\n    const lang = useLanguage();\n\n    useEffect(() => {\n      setHidingPlayers(!showHiddenPlayers);\n    }, [showHiddenPlayers]);\n\n    let topPlace = 1;\n    const occuredNicknames = [];\n    let hiddenPlayersCount = 0;\n    const results = chart.results\n      .map((res, index, array) => {\n        const isProtagonist = res.nickname === protagonistName;\n        const isPlayerHidden =\n          !isProtagonist && isHidingPlayers && (playersHiddenStatus[res.playerId] || false);\n        const isSecondOccurenceInResults = occuredNicknames.includes(res.nickname);\n        occuredNicknames.push(res.nickname);\n\n        let placeDifference = 0;\n        if (res.scoreIncrease && res.dateAdded === chart.latestAddedScoreDate) {\n          const prevScore = res.score - res.scoreIncrease;\n          const newIndex = _.findLastIndex((res) => res.score > prevScore, array);\n          placeDifference = newIndex - index;\n        }\n\n        if (index === 0) {\n          topPlace = 1;\n        } else if (\n          !isSecondOccurenceInResults &&\n          res.score !== _.get([index - 1, 'score'], array)\n        ) {\n          topPlace += 1;\n        }\n\n        if (isPlayerHidden) {\n          hiddenPlayersCount++;\n        }\n\n        return {\n          ...res,\n          topPlace,\n          isSecondOccurenceInResults,\n          isPlayerHidden,\n          highlightIndex: uniqueSelectedNames.indexOf(res.nickname),\n          isProtagonist: res.nickname === protagonistName,\n          placeDifference,\n          isLatestScore: res.dateAdded === chart.latestAddedScoreDate,\n        };\n      })\n      .filter((res, index) => {\n        return !(res.isPlayerHidden || (res.isUnknownPlayer && index !== 0));\n      })\n      .map((res, index, array) => {\n        // Collapse results that are not within 2 places of a highlighted result\n        const isResultImportant = (r) =>\n          r.playerId === currentPlayerId || r.isLatestScore || r.highlightIndex > -1;\n        const highlightRange = 2;\n        const isHighlighted = isResultImportant(res);\n        const isBeforeHighlighted = array\n          .slice(index + 1, index + 1 + highlightRange)\n          .some(isResultImportant);\n        const isAfterHighlighted = array\n          .slice(index - highlightRange, index)\n          .some(isResultImportant);\n        return {\n          ...res,\n          isCollapsible: !isHighlighted && !isBeforeHighlighted && !isAfterHighlighted,\n        };\n      });\n\n    const resultGroups = results.reduce((acc, res) => {\n      if (!acc.length) {\n        acc.push({\n          isGroupCollapsible: res.isCollapsible,\n          results: [res],\n        });\n      } else if (acc[acc.length - 1].isGroupCollapsible !== res.isCollapsible) {\n        acc.push({\n          isGroupCollapsible: res.isCollapsible,\n          results: [res],\n        });\n      } else {\n        acc[acc.length - 1].results.push(res);\n      }\n      return acc;\n    }, []);\n\n    // TODO: remove check from sharedCharts when SocketTracker works off results data instead of topPerSong\n\n    return (\n      <div className=\"song-block\" ref={ref}>\n        <div className=\"song-name\">\n          <ChartLabel type={chart.chartType} level={chart.chartLevel} />\n          {isSocketView ? (\n            <div className=\"song-name-text\">\n              {chart.difficulty ? `(${chart.difficulty.toFixed(1)}) ` : ''}\n              {chart.song}\n            </div>\n          ) : (\n            <div className=\"song-name-text\">\n              <NavLink\n                exact\n                to={routes.leaderboard.sharedChart.getPath({ sharedChartId: chart.sharedChartId })}\n              >\n                {chart.song}\n              </NavLink>{' '}\n              <span className=\"_grey-text\">\n                {chart.difficulty ? `(${chart.difficulty.toFixed(1)}) ` : ''}\n              </span>\n            </div>\n          )}\n          {!isSocketView && (\n            <div className=\"youtube-link\">\n              <a\n                href={`https://youtube.com/results?${queryString.stringify({\n                  search_query: `${chart.song} ${chart.chartLabel}`.replace(/( -)|(- )/g, ' '),\n                })}`}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                <FaYoutube />\n              </a>\n            </div>\n          )}\n          <div className=\"_flex-fill\" />\n          <div className=\"right-side-block\">\n            {hiddenPlayersCount > 0 && (\n              <div\n                className={classNames('players-hidden-count _grey-text', {\n                  '_on-hover': !isSocketView,\n                })}\n              >\n                {lang.HIDDEN}: {hiddenPlayersCount}\n              </div>\n            )}\n            {(hiddenPlayersCount > 0 || !isHidingPlayers) && !isSocketView && (\n              <div\n                className=\"globe-icon _on-hover\"\n                onClick={() => setHidingPlayers(!isHidingPlayers)}\n              >\n                <FaGlobeAmericas />\n              </div>\n            )}\n          </div>\n        </div>\n        <div className=\"charts\">\n          {!_.isEmpty(results) && (\n            <div className=\"chart\">\n              <div className=\"results\">\n                <table>\n                  <tbody>\n                    {resultGroups.map((group) => {\n                      const groupResults = group.results.map((res) => {\n                        const showPpChange = res.isProtagonist && showProtagonistPpChange;\n                        return (\n                          <React.Fragment key={res.isRank + '_' + res.nickname}>\n                            <Result\n                              chart={chart}\n                              res={res}\n                              placeDifference={res.placeDifference}\n                              showPpChange={showPpChange}\n                              highlightIndex={res.highlightIndex}\n                              leftProfile={leftProfile}\n                              rightProfile={rightProfile}\n                              isSocketView={isSocketView}\n                              notBestGradeResult={!!res.bestGradeResult}\n                            />\n                            {res.bestGradeResult && (\n                              <Result\n                                chart={chart}\n                                res={res.bestGradeResult}\n                                placeDifference={res.placeDifference}\n                                showPpChange={showPpChange}\n                                highlightIndex={res.highlightIndex}\n                                leftProfile={leftProfile}\n                                rightProfile={rightProfile}\n                                isSocketView={isSocketView}\n                                bestGradeScore={true}\n                              />\n                            )}\n                          </React.Fragment>\n                        );\n                      });\n                      if (group.isGroupCollapsible) {\n                        return (\n                          <ResultsCollapser count={groupResults.length}>\n                            {groupResults}\n                          </ResultsCollapser>\n                        );\n                      } else {\n                        return <>{groupResults}</>;\n                      }\n                    })}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n);\n\nexport default Chart;\n"],"names":["Result","res","chart","placeDifference","showPpChange","highlightIndex","leftProfile","rightProfile","isSocketView","bestGradeScore","notBestGradeResult","lang","useLanguage","region","useSelector","state","_a","isCurrentPlayer","_b","ratingInfoBlock","DEBUG","jsx","Fragment","jsxs","flag","Flag","exp","getExp","playerRoute","routes","classNames","colorsArray","Link","FaAngleDoubleUp","mod","avMod","xMod","Overlay","numeral","ResultScreenshotLink","FaExclamationTriangle","Grade","Tooltip","getShortTimeAgo","tooltipFormatter","ResultsCollapser","children","count","collapsed","setCollapsed","useState","BsArrowsExpand","FilteredDataContext","React","Chart","propPlayersHiddenStatus","showHiddenPlayers","showProtagonistPpChange","uniqueSelectedNames","protagonistName","chartIndex","forcedChart","ref","currentPlayerId","statePlayersHiddenStatus","playersHiddenStatus","filteredData","useContext","isHidingPlayers","setHidingPlayers","useEffect","topPlace","occuredNicknames","hiddenPlayersCount","results","index","array","isPlayerHidden","isSecondOccurenceInResults","prevScore","_","isResultImportant","r","isHighlighted","isBeforeHighlighted","isAfterHighlighted","resultGroups","acc","ChartLabel","NavLink","queryString","FaYoutube","FaGlobeAmericas","group","groupResults"],"mappings":"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"}