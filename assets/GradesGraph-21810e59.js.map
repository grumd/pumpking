{"version":3,"file":"GradesGraph-21810e59.js","sources":["../../src/features/profile/hooks/usePlayerGrades.ts","../../src/features/profile/components/DoubleSingleGradesGraph.tsx","../../src/features/profile/components/DoubleSingleGraph.tsx","../../src/features/profile/components/GradesGraph.tsx"],"sourcesContent":["import _ from 'lodash/fp';\nimport { useMemo } from 'react';\n\nimport { api } from 'utils/trpc';\n\nexport const usePlayerGrades = ({ playerId }: { playerId: number | undefined }) => {\n  return api.players.grades.useQuery(playerId);\n};\n\nexport const useGradesGraphData = ({ playerId }: { playerId: number | undefined }) => {\n  const { data } = usePlayerGrades({ playerId });\n\n  return useMemo(() => {\n    if (!data) {\n      return null;\n    }\n    const { gradeCounts, totalCounts } = data;\n\n    return _.flow(\n      _.groupBy<(typeof totalCounts)[number]>('level'),\n      (x) => _.values(x),\n      _.map((levelTotals) => {\n        const { level } = levelTotals[0];\n        const gradeTotals = _.filter((x) => x.level === level, gradeCounts);\n        const groupedByTypeGrade = _.groupBy((x) => `${x.type}-${x.grade}`, gradeTotals);\n        const groupedByType = _.groupBy('type', gradeTotals);\n        const groupedByGrade = _.groupBy('grade', gradeTotals);\n        const totalChartsByType = _.mapValues(_.sumBy('count'), _.groupBy('type', levelTotals));\n        const totalCharts = _.sum(_.values(totalChartsByType));\n        const totalPlayedCharts = _.sumBy('count', gradeTotals);\n        return {\n          level,\n          totalChartsByType,\n          totalCharts,\n          totalPlayedCharts,\n          byTypeGrade: _.mapValues(_.sumBy('count'), groupedByTypeGrade),\n          byGrade: _.mapValues(_.sumBy('count'), groupedByGrade),\n          byType: _.mapValues(_.sumBy('count'), groupedByType),\n        };\n      })\n    )(totalCounts);\n  }, [data]);\n};\n","import { useParams } from 'react-router';\nimport {\n  Bar,\n  BarChart,\n  Label,\n  Tooltip as RechartsTooltip,\n  ReferenceLine,\n  ResponsiveContainer,\n  XAxis,\n  YAxis,\n} from 'recharts';\n\nimport css from './grades-graph.module.scss';\n\nimport { useGradesGraphData } from '../hooks/usePlayerGrades';\n\nconst GradesGraph = () => {\n  const params = useParams();\n  const graphData = useGradesGraphData({\n    playerId: params.id ? Number(params.id) : undefined,\n  });\n\n  if (!graphData) {\n    return null;\n  }\n\n  type Root = (typeof graphData)[number];\n\n  const getGradeKey = (type: 'S' | 'D', grade: string) => {\n    return (x: Root) =>\n      ((type === 'D' ? -100 : 100) * (x.byTypeGrade[`${type}-${grade}`] ?? 0)) /\n      x.totalChartsByType[type];\n  };\n\n  return (\n    <ResponsiveContainer aspect={0.74}>\n      <BarChart\n        data={graphData}\n        margin={{ top: 5, bottom: 5, right: 5, left: 0 }}\n        stackOffset=\"sign\"\n      >\n        <RechartsTooltip<number, string>\n          isAnimationActive={false}\n          content={({ payload }) => {\n            if (!payload || !payload[0]) {\n              return null;\n            }\n            const root = payload[0].payload as Root;\n            const singleGrades = payload.filter((x) => x.value && x.name?.startsWith('S-'));\n            const doubleGrades = payload.filter((x) => x.value && x.name?.startsWith('D-'));\n            return (\n              <div className={css.historyTooltip}>\n                <div>Level: {root.level}</div>\n                {!!singleGrades.length && (\n                  <>\n                    <div>Singles: (total {root.totalChartsByType.S})</div>\n                    <div\n                      style={{\n                        display: 'grid',\n                        gridTemplateColumns: 'repeat(3, min-content)',\n                        gap: '0 0.5em',\n                      }}\n                    >\n                      {singleGrades.map((item) =>\n                        item.name ? (\n                          <div\n                            key={item.name}\n                            style={{\n                              display: 'grid',\n                              gridTemplateColumns: 'subgrid',\n                              fontWeight: 'bold',\n                              color: item.color,\n                              gridColumn: '1/4',\n                            }}\n                          >\n                            <span>{item.name.slice(2)}: </span>\n                            <span>{item.value ? `${item.value.toFixed(1)}%` : null}</span>\n                            <span>({root.byTypeGrade[item.name] ?? 0})</span>\n                          </div>\n                        ) : null\n                      )}\n                    </div>\n                  </>\n                )}\n                {!!doubleGrades.length && (\n                  <>\n                    <div>Doubles: (total {root.totalChartsByType.D})</div>\n                    <div\n                      style={{\n                        display: 'grid',\n                        gridTemplateColumns: 'repeat(3, min-content)',\n                        gap: '0 0.5em',\n                      }}\n                    >\n                      {doubleGrades.map((item) =>\n                        item.name ? (\n                          <div\n                            key={item.name}\n                            style={{\n                              display: 'grid',\n                              gridTemplateColumns: 'subgrid',\n                              fontWeight: 'bold',\n                              color: item.color,\n                              gridColumn: '1/4',\n                            }}\n                          >\n                            <span>{item.name.slice(2)}: </span>\n                            <span>{item.value ? `${(-item.value).toFixed(1)}%` : null}</span>\n                            <span>({root.byTypeGrade[item.name] ?? 0})</span>\n                          </div>\n                        ) : null\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            );\n          }}\n        />\n        <XAxis dataKey=\"level\" />\n        <YAxis\n          tickFormatter={(x) => `${Math.round(Math.abs(x))}%`}\n          width={40}\n          domain={([dataMin, dataMax]) => [Math.min(dataMin, -10), Math.max(10, dataMax)]}\n        />\n        <Bar name=\"D-SSS+\" dataKey={getGradeKey('D', 'SSS+')} fill=\"#32f1f1\" stackId=\"stack\" />\n        <Bar name=\"D-SSS\" dataKey={getGradeKey('D', 'SSS')} fill=\"#16d4d4\" stackId=\"stack\" />\n        <Bar name=\"D-SS+\" dataKey={getGradeKey('D', 'SS+')} fill=\"#ffd900\" stackId=\"stack\" />\n        <Bar name=\"D-SS\" dataKey={getGradeKey('D', 'SS')} fill=\"#debc00\" stackId=\"stack\" />\n        <Bar name=\"D-S+\" dataKey={getGradeKey('D', 'S+')} fill=\"#c1a400\" stackId=\"stack\" />\n        <Bar name=\"D-S\" dataKey={getGradeKey('D', 'S')} fill=\"#a78e00\" stackId=\"stack\" />\n        <Bar name=\"D-AAA+\" dataKey={getGradeKey('D', 'AAA+')} fill=\"#c4cde0\" stackId=\"stack\" />\n        <Bar name=\"D-AAA\" dataKey={getGradeKey('D', 'AAA')} fill=\"#a2abb5\" stackId=\"stack\" />\n        <Bar name=\"D-AA+\" dataKey={getGradeKey('D', 'AA+')} fill=\"#c36134\" stackId=\"stack\" />\n        <Bar name=\"D-AA\" dataKey={getGradeKey('D', 'AA')} fill=\"#a85027\" stackId=\"stack\" />\n        <Bar name=\"D-A+\" dataKey={getGradeKey('D', 'A+')} fill=\"#7a4228\" stackId=\"stack\" />\n        <Bar name=\"D-A\" dataKey={getGradeKey('D', 'A')} fill=\"#5a3b2d\" stackId=\"stack\" />\n        <Bar name=\"D-B\" dataKey={getGradeKey('D', 'B')} fill=\"#6e5a83\" stackId=\"stack\" />\n        <Bar name=\"D-C\" dataKey={getGradeKey('D', 'C')} fill=\"#5f4f6f\" stackId=\"stack\" />\n        <Bar name=\"D-D\" dataKey={getGradeKey('D', 'D')} fill=\"#4a4155\" stackId=\"stack\" />\n        <Bar name=\"D-F\" dataKey={getGradeKey('D', 'F')} fill=\"#480404\" stackId=\"stack\" />\n        <Bar name=\"S-SSS+\" dataKey={getGradeKey('S', 'SSS+')} fill=\"#32f1f1\" stackId=\"stack\" />\n        <Bar name=\"S-SSS\" dataKey={getGradeKey('S', 'SSS')} fill=\"#16d4d4\" stackId=\"stack\" />\n        <Bar name=\"S-SS+\" dataKey={getGradeKey('S', 'SS+')} fill=\"#ffd900\" stackId=\"stack\" />\n        <Bar name=\"S-SS\" dataKey={getGradeKey('S', 'SS')} fill=\"#debc00\" stackId=\"stack\" />\n        <Bar name=\"S-S+\" dataKey={getGradeKey('S', 'S+')} fill=\"#c1a400\" stackId=\"stack\" />\n        <Bar name=\"S-S\" dataKey={getGradeKey('S', 'S')} fill=\"#a78e00\" stackId=\"stack\" />\n        <Bar name=\"S-AAA+\" dataKey={getGradeKey('S', 'AAA+')} fill=\"#c4cde0\" stackId=\"stack\" />\n        <Bar name=\"S-AAA\" dataKey={getGradeKey('S', 'AAA')} fill=\"#a2abb5\" stackId=\"stack\" />\n        <Bar name=\"S-AA+\" dataKey={getGradeKey('S', 'AA+')} fill=\"#c36134\" stackId=\"stack\" />\n        <Bar name=\"S-AA\" dataKey={getGradeKey('S', 'AA')} fill=\"#a85027\" stackId=\"stack\" />\n        <Bar name=\"S-A+\" dataKey={getGradeKey('S', 'A+')} fill=\"#7a4228\" stackId=\"stack\" />\n        <Bar name=\"S-A\" dataKey={getGradeKey('S', 'A')} fill=\"#5a3b2d\" stackId=\"stack\" />\n        <Bar name=\"S-B\" dataKey={getGradeKey('S', 'B')} fill=\"#6e5a83\" stackId=\"stack\" />\n        <Bar name=\"S-C\" dataKey={getGradeKey('S', 'C')} fill=\"#5f4f6f\" stackId=\"stack\" />\n        <Bar name=\"S-D\" dataKey={getGradeKey('S', 'D')} fill=\"#4a4155\" stackId=\"stack\" />\n        <Bar name=\"S-F\" dataKey={getGradeKey('S', 'F')} fill=\"#480404\" stackId=\"stack\" />\n        <Label value=\"Double\" offset={0} position=\"insideBottomLeft\" />\n        <Label value=\"Single\" offset={0} position=\"insideTopLeft\" />\n        <ReferenceLine y={0} stroke=\"#bbb\" />\n      </BarChart>\n    </ResponsiveContainer>\n  );\n};\n\nexport default GradesGraph;\n","import { useParams } from 'react-router';\nimport {\n  Bar,\n  BarChart,\n  Legend,\n  Tooltip as RechartsTooltip,\n  ReferenceLine,\n  ResponsiveContainer,\n  XAxis,\n  YAxis,\n} from 'recharts';\n\nimport css from './grades-graph.module.scss';\n\nimport { useGradesGraphData } from '../hooks/usePlayerGrades';\n\nconst DoubleSingleGraph = () => {\n  const params = useParams();\n  const graphData = useGradesGraphData({\n    playerId: params.id ? Number(params.id) : undefined,\n  });\n\n  if (!graphData) {\n    return null;\n  }\n\n  type Root = (typeof graphData)[number];\n\n  return (\n    <ResponsiveContainer aspect={1.6}>\n      <BarChart\n        data={graphData}\n        stackOffset=\"sign\"\n        margin={{ top: 5, bottom: 5, right: 5, left: 0 }}\n      >\n        <RechartsTooltip<number, string>\n          isAnimationActive={false}\n          content={({ payload }) => {\n            if (!payload || !payload[0]) {\n              return null;\n            }\n            const root = payload[0].payload as Root;\n            const totalD = root.totalChartsByType.D ?? 0;\n            const totalS = root.totalChartsByType.S ?? 0;\n            return (\n              <div className={css.historyTooltip}>\n                <div>Level: {root.level}</div>\n                {totalS > 0 && payload[1].value != null && (\n                  <div style={{ fontWeight: 'bold', color: payload[1].color }}>\n                    Single: {Math.abs(payload[1].value).toFixed(1)}% (\n                    {Math.round((payload[1].value * totalS) / 100)}/{totalS})\n                  </div>\n                )}\n                {totalD > 0 && payload[0].value != null && (\n                  <div style={{ fontWeight: 'bold', color: payload[0].color }}>\n                    Double: {Math.abs(payload[0].value).toFixed(1)}% (\n                    {Math.round((Math.abs(payload[0].value) * totalD) / 100)}/{totalD})\n                  </div>\n                )}\n              </div>\n            );\n          }}\n        />\n        <XAxis dataKey=\"level\" />\n        <YAxis\n          tickFormatter={(x) => Math.round(Math.abs(x)) + '%'}\n          width={40}\n          domain={([dataMin, dataMax]) => [Math.min(dataMin, -10), Math.max(10, dataMax)]}\n        />\n        <RechartsTooltip />\n        <ReferenceLine y={0} stroke=\"#555\" />\n        <Legend />\n        <Bar\n          name=\"D\"\n          dataKey={(x) => (-100 * (x.byType.D ?? 0)) / (x.totalChartsByType.D ?? 1)}\n          fill=\"var(--double_chart_color)\"\n          stackId=\"stack\"\n        />\n        <Bar\n          name=\"S\"\n          dataKey={(x) => (100 * (x.byType.S ?? 0)) / (x.totalChartsByType.S ?? 1)}\n          fill=\"var(--single_chart_color)\"\n          stackId=\"stack\"\n        />\n      </BarChart>\n    </ResponsiveContainer>\n  );\n};\n\nexport default DoubleSingleGraph;\n","import { useParams } from 'react-router';\nimport {\n  Bar,\n  BarChart,\n  Legend,\n  Tooltip as RechartsTooltip,\n  ResponsiveContainer,\n  XAxis,\n  YAxis,\n} from 'recharts';\n\nimport css from './grades-graph.module.scss';\n\nimport { useGradesGraphData } from '../hooks/usePlayerGrades';\n\nconst GradesGraph = () => {\n  const params = useParams();\n  const graphData = useGradesGraphData({\n    playerId: params.id ? Number(params.id) : undefined,\n  });\n\n  if (!graphData) {\n    return null;\n  }\n\n  type Root = (typeof graphData)[number];\n\n  const getGradeKey = (grade: string) => {\n    return (x: Root) => (100 * (x.byGrade[grade] ?? 0)) / x.totalPlayedCharts;\n  };\n\n  return (\n    <ResponsiveContainer aspect={1.6}>\n      <BarChart\n        stackOffset=\"sign\"\n        data={graphData}\n        margin={{ top: 5, bottom: 5, right: 5, left: 0 }}\n      >\n        <RechartsTooltip<number, string>\n          isAnimationActive={false}\n          content={({ payload }) => {\n            if (!payload || !payload[0]) {\n              return null;\n            }\n            return (\n              <div className={css.historyTooltip}>\n                <div>Level: {payload[0].payload.level}</div>\n                <div\n                  style={{\n                    display: 'grid',\n                    gridTemplateColumns: 'repeat(3, min-content)',\n                    gap: '0 0.5em',\n                  }}\n                >\n                  {payload\n                    .filter((item) => item.value)\n                    .map((item) => (\n                      <div\n                        key={item.name}\n                        style={{\n                          display: 'grid',\n                          gridTemplateColumns: 'subgrid',\n                          fontWeight: 'bold',\n                          color: item.color,\n                          gridColumn: '1/4',\n                        }}\n                      >\n                        <span>{item.name}: </span>\n                        <span>\n                          {/* Recharts has wrong TS types */}\n                          {(item.dataKey as unknown as ReturnType<typeof getGradeKey>)(\n                            item.payload\n                          ).toFixed(1)}\n                          %\n                        </span>\n                        <span>{item.name ? item.payload.byGrade[item.name] ?? 0 : null}</span>\n                      </div>\n                    ))}\n                </div>\n              </div>\n            );\n          }}\n        />\n        <XAxis dataKey=\"level\" />\n        <YAxis\n          domain={[0, 100]}\n          ticks={[0, 50, 100]}\n          tickFormatter={(x) => `${Math.round(x)}%`}\n          width={40}\n        />\n        <Legend />\n        <Bar name=\"SSS+\" dataKey={getGradeKey('SSS+')} fill=\"#0cd8d8\" stackId=\"stack\" />\n        <Bar name=\"SSS\" dataKey={getGradeKey('SSS')} fill=\"#13adad\" stackId=\"stack\" />\n        <Bar name=\"SS+\" dataKey={getGradeKey('SS+')} fill=\"#ffd900\" stackId=\"stack\" />\n        <Bar name=\"SS\" dataKey={getGradeKey('SS')} fill=\"#debc00\" stackId=\"stack\" />\n        <Bar name=\"S+\" dataKey={getGradeKey('S+')} fill=\"#c1a400\" stackId=\"stack\" />\n        <Bar name=\"S\" dataKey={getGradeKey('S')} fill=\"#a78e00\" stackId=\"stack\" />\n        <Bar name=\"AAA+\" dataKey={getGradeKey('AAA+')} fill=\"#c4cde0\" stackId=\"stack\" />\n        <Bar name=\"AAA\" dataKey={getGradeKey('AAA')} fill=\"#a2abb5\" stackId=\"stack\" />\n        <Bar name=\"AA+\" dataKey={getGradeKey('AA+')} fill=\"#c36134\" stackId=\"stack\" />\n        <Bar name=\"AA\" dataKey={getGradeKey('AA')} fill=\"#a85027\" stackId=\"stack\" />\n        <Bar name=\"A+\" dataKey={getGradeKey('A+')} fill=\"#7a4228\" stackId=\"stack\" />\n        <Bar name=\"A\" dataKey={getGradeKey('A')} fill=\"#5a3b2d\" stackId=\"stack\" />\n        <Bar name=\"B\" dataKey={getGradeKey('B')} fill=\"#6e5a83\" stackId=\"stack\" />\n        <Bar name=\"C\" dataKey={getGradeKey('C')} fill=\"#5f4f6f\" stackId=\"stack\" />\n        <Bar name=\"D\" dataKey={getGradeKey('D')} fill=\"#4a4155\" stackId=\"stack\" />\n        <Bar name=\"F\" dataKey={getGradeKey('F')} fill=\"#480404\" stackId=\"stack\" />\n      </BarChart>\n    </ResponsiveContainer>\n  );\n};\n\nexport default GradesGraph;\n"],"names":["usePlayerGrades","playerId","api","useGradesGraphData","data","useMemo","gradeCounts","totalCounts","_","x","levelTotals","level","gradeTotals","groupedByTypeGrade","groupedByType","groupedByGrade","totalChartsByType","totalCharts","totalPlayedCharts","GradesGraph","params","useParams","graphData","getGradeKey","type","grade","jsx","ResponsiveContainer","jsxs","BarChart","RechartsTooltip","payload","root","singleGrades","_a","doubleGrades","css","Fragment","item","XAxis","YAxis","dataMin","dataMax","Bar","Label","ReferenceLine","DoubleSingleGraph","totalD","totalS","Legend"],"mappings":"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"}