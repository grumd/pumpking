{"version":3,"file":"Tournaments-9dd9b41b.js","sources":["../../src/legacy-code/components/Tournaments/Tournaments.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport classNames from 'classnames';\nimport _ from 'lodash/fp';\nimport { useDispatch, useSelector } from 'react-redux';\nimport numeral from 'numeral';\n\nimport './tournaments.scss';\n\nimport { routes } from 'legacy-code/constants/routes';\n\nimport { fetchCurrentTournament } from 'legacy-code/reducers/tournament';\n\nimport Loader from 'legacy-code/components/Shared/Loader';\nimport { ChartLabel } from 'legacy-code/components/Leaderboard/ChartLabel';\n\nimport { labelToTypeLevel } from 'legacy-code/utils/leaderboards';\n\nimport { useLanguage } from 'utils/context/translation';\n\nexport default function Tournaments() {\n  const lang = useLanguage();\n  const dispatch = useDispatch();\n  const [selectedBracket, setSelectedBracket] = useState(null);\n\n  const tournData = useSelector((state) => state.tournament.data);\n  const profiles = useSelector((state) => state.results.profiles);\n  const isLoading = useSelector((state) => state.tournament.isLoading);\n  const currentPlayerId = useSelector((state) => _.get('player.id', state.user.data));\n\n  useEffect(() => {\n    dispatch(fetchCurrentTournament());\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (currentPlayerId && !selectedBracket && _.get('brackets', tournData)) {\n      const bracket = _.find((br) => {\n        return br.playerIds.includes(currentPlayerId);\n      }, tournData.brackets);\n      bracket && setSelectedBracket(bracket);\n    }\n  }, [currentPlayerId, selectedBracket, tournData]);\n\n  if (isLoading || _.isEmpty(profiles)) {\n    return <Loader />;\n  }\n\n  const { tournament, brackets } = tournData;\n\n  if (!tournament) {\n    return null;\n  }\n\n  const date = new Date(tournament.start_date);\n  const monthText = date.toLocaleString('default', {\n    month: 'long',\n  });\n  const tournamentTitle = `${date.getFullYear()} ${monthText}`;\n\n  return (\n    <div className=\"tournaments-page\">\n      <header>{tournamentTitle}</header>\n      <div className=\"description\">\n        <div className=\"labeled-item\">\n          <div className=\"title\">{lang.START_DATE}</div>\n          <div className=\"text\">{new Date(tournament.start_date).toLocaleDateString()}</div>\n        </div>\n        <div className=\"labeled-item\">\n          <div className=\"title\">{lang.END_DATE}</div>\n          <div className=\"text\">{new Date(tournament.end_date).toLocaleDateString()}</div>\n        </div>\n      </div>\n      <div className=\"brackets-title\">{lang.BRACKETS}</div>\n      <div className=\"brackets\">\n        {brackets.map((bracket) => {\n          return (\n            <div\n              key={bracket.name}\n              className={classNames('bracket', {\n                active: bracket.name === _.get('name', selectedBracket),\n              })}\n              onClick={() => setSelectedBracket(bracket)}\n            >\n              <div className=\"bracket-name\">{bracket.name}</div>\n              {bracket.charts.map((chart) => {\n                const [type, level] = labelToTypeLevel(chart.label);\n                return (\n                  <div className=\"chart\" key={chart.sharedChartId}>\n                    <ChartLabel type={type} level={level} /> {chart.trackName}\n                  </div>\n                );\n              })}\n            </div>\n          );\n        })}\n      </div>\n      {selectedBracket && (\n        <>\n          <div className=\"results-title\">{lang.RESULTS}</div>\n          <div className=\"results\">\n            <table>\n              <thead>\n                <tr>\n                  <th className=\"player-name\">{lang.PLAYER}</th>\n                  <th className=\"total\">{lang.TOTAL}</th>\n                  {selectedBracket.charts.map((chart) => {\n                    const [type, level] = labelToTypeLevel(chart.label);\n                    return (\n                      <th colSpan={2} key={chart.sharedChartId}>\n                        <div className=\"chart-header\">\n                          <ChartLabel type={type} level={level} />{' '}\n                          <NavLink\n                            exact\n                            to={routes.leaderboard.sharedChart.getPath({\n                              sharedChartId: chart.sharedChartId,\n                            })}\n                          >\n                            {chart.trackName}\n                          </NavLink>\n                        </div>\n                      </th>\n                    );\n                  })}\n                </tr>\n              </thead>\n              <tbody>\n                {(() => {\n                  const players = _.flow(\n                    _.groupBy('player_id'),\n                    _.mapValues(\n                      _.flow(\n                        _.map((result) => ({\n                          ...result,\n                          columnIndex: _.findIndex(\n                            { sharedChartId: result.shared_chart },\n                            selectedBracket.charts\n                          ),\n                        })),\n                        _.groupBy('columnIndex')\n                      )\n                    )\n                  )(selectedBracket.scores);\n                  const charts = selectedBracket.charts.map((chart, index) => {\n                    return {\n                      ...chart,\n                      maxScore: _.flow(\n                        _.values,\n                        _.flatMap(index),\n                        _.maxBy('score'),\n                        _.get('score')\n                      )(players),\n                    };\n                  });\n\n                  const playerData = _.mapValues(\n                    _.flow(\n                      _.toPairs,\n                      _.map(([index, results]) => {\n                        const maxScore = charts[index].maxScore;\n                        const bestPlayerScore = _.flow(_.maxBy('score'), _.get('score'))(results);\n                        const percent = ((bestPlayerScore / maxScore) * 100).toFixed(1);\n                        return [\n                          index,\n                          {\n                            playerName: results[0].player_name,\n                            score: bestPlayerScore,\n                            percent: percent,\n                            percentRaw: bestPlayerScore / maxScore,\n                          },\n                        ];\n                      }),\n                      (chartResults) => {\n                        const totalPercentRaw = _.sumBy('[1].percentRaw', chartResults);\n                        return {\n                          infoByIndex: _.fromPairs(chartResults),\n                          totalPercentRaw,\n                          totalPercent: (totalPercentRaw * 100).toFixed(1),\n                        };\n                      }\n                    ),\n                    players\n                  );\n                  const sortedIds = _.flow(\n                    _.keys,\n                    _.orderBy((id) => playerData[id].totalPercentRaw, ['desc'])\n                  )(playerData);\n                  const noResultsIds = _.remove(\n                    (id) => sortedIds.includes(_.toString(id)) || !profiles[id],\n                    selectedBracket.playerIds\n                  );\n\n                  return [...sortedIds, ...noResultsIds].map((playerId) => {\n                    const data = playerData[playerId] || {};\n                    const playerName = _.get('name', profiles[playerId]) || data.playerName;\n                    return (\n                      <tr key={playerId}>\n                        <td className=\"player-name\">{playerName}</td>\n                        <td className=\"total\">{data.totalPercent || 0}</td>\n                        {selectedBracket.charts.map((chart, index) => {\n                          const info = data.infoByIndex && data.infoByIndex[index];\n                          return (\n                            <React.Fragment key={index}>\n                              <td>{info && `${info.percent}%`}</td>\n                              <td>{info && numeral(info.score).format('0,0')}</td>\n                            </React.Fragment>\n                          );\n                        })}\n                      </tr>\n                    );\n                  });\n                })()}\n              </tbody>\n            </table>\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n"],"names":["Tournaments","lang","useLanguage","dispatch","useDispatch","selectedBracket","setSelectedBracket","useState","tournData","useSelector","state","profiles","isLoading","currentPlayerId","_","useEffect","fetchCurrentTournament","bracket","br","Loader","tournament","brackets","date","monthText","tournamentTitle","jsxs","jsx","classNames","chart","type","level","labelToTypeLevel","ChartLabel","Fragment","NavLink","routes","players","result","charts","index","playerData","results","maxScore","bestPlayerScore","percent","chartResults","totalPercentRaw","sortedIds","id","noResultsIds","playerId","data","playerName","info","React","numeral"],"mappings":"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"}